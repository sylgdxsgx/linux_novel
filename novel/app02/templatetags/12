from django.shortcuts import render
from django.shortcuts import redirect
# from django.views.decorators.cache import cache_page
from django.core.cache import cache
import json,subprocess,os,time,threading
#如果想使用数据库,需要先导入(需要在开头导入)
from app02 import models

class SendFileThread(threading.Thread):

    def __init__(self):
        super().__init__()
        self.action = 0
        self.daemon = False
        self.current_stamp = 0

    def go(self,stamp):
        self.current_stamp = stamp
        self.action = 1
        self.setName(stamp)
        print(self.isAlive())
        self.start()

    def send(self,stamp):
        '''发送文件'''
        #根据时间戳和machine找到记录，故而暂不支持
        test_error = [] #保存出错的文件:[m1.list,p2.list]
        testinfo_list = models.TestInfo_Detail.objects.filter(time_stamp=stamp).order_by('machine')
        for test in testinfo_list:
            result = self.send_file(test)
            if not result:
                test_error.append(test.test_case)
        print('test_error=',test_error)

    def send_file(self,obj):
        SEND_CMD = r"""
                    expect -c "
                    set timeout 5;
                    spawn scp {d} {src} {user}@{host}:{dest};
                    expect {{
                        *assword {{send {pwd}\r;}}
                        yes/no {{send yes\r; exp_continue;}}
                    }}
                    expect eof"
                    """
        DIR_CMD = r"""
                    expect -c "
                    set timeout 5;
                    spawn ssh {user}@{ip};
                    expect {{
                        *assword {{send {pwd}\r;}}
                        yes/no {{send yes\r; exp_continue;}}
                    }}
                    expect *>*
                    send \"MD {dest}\r\";
                    send \"exit\r\"
                    expect *>*
                    "
                    """
        START_CMD = r"""
                    expect -c "
                    set timeout 5;
                    spawn ssh {user}@{ip};
                    expect {{
                        *assword {{send {pwd}\r;}}
                        yes/no {{send yes\r; exp_continue;}}
                    }}
                    expect *>*
                    send \"MD {dest}\r\";
                    send \"exit\r\"
                    expect *>*
                    "
                    """
        print('\n\n----------- test case: {} -----------'.format(obj.test_case))
        user = obj.machine.name
        ip = obj.machine.ip
        pwd = obj.machine.password
        dest = models.TestConfig.objects.get(id=1).test_root_dir
        #先在执行机创建文件夹
        scp_cmd = DIR_CMD.format(user=user,ip=ip,pwd=pwd,dest=dest.replace('/','\\'))
        sub = subprocess.call(scp_cmd,shell=True,stdout=subprocess.PIPE)    #去掉stdout可以查看输出
        #源文件处理
        test_case = obj.test_case
        if test_case[0]=='m':
            test_case = models.Modular.objects.get(id=test_case[1:])
            proj_svn = test_case.project.svn
        else:
            test_case = models.Point.objects.get(id=test_case[1:])
            proj_svn = test_case.modular.project.svn
        svn = test_case.svn.split("\n")
        print(svn)
        mainfile = test_case.main
        for svni in svn:
            temp_svn = proj_svn+svni
            if not os.path.exists(temp_svn):    #当源文件（源文件夹）不存在时
                print('{} -- Not exists !'.format(temp_svn))
                continue
            if os.path.isfile(temp_svn):    #当是文件时
                scp_cmd = SEND_CMD.format(d='',user=user,host=ip,pwd=pwd,src=temp_svn,dest=dest)
            else:   #当时文件夹时
                scp_cmd = SEND_CMD.format(d='-r',user=user,host=ip,pwd=pwd,src=temp_svn,dest=dest)
            #发送数据
            sub = subprocess.Popen(scp_cmd,stdin=subprocess.PIPE,stdout=subprocess.PIPE,stderr=subprocess.PIPE,shell=True)
            output,err=sub.communicate()  #阻塞
            status = sub.returncode
            print('>>>send "{}" status= {} err= {}\n'.format(temp_svn,status,err))
            if status !=0 and not err:
                result = False
                break   #若是发送文件出错，则直接终止发送
        else:
            result = True
        return result

    def run(self):
        if self.action:
            self.action = 0
            self.send(self.current_stamp)

sendfilethread = SendFileThread()


def tologin(request):
    return redirect('/app02/login/')

def login(request):
    if request.method == 'POST':
        input_email = request.POST['username']
        input_pwd = request.POST['password']
        try:
            info = models.UserInfo.objects.get(username=input_email)
            if info.password == input_pwd:
                dic1 = {'name':info.username}
                return redirect('/app02/index/?username='+info.username)
        except Exception as e:
            print(e)
        return render(request,'login.html',{'status':'用户名或密码错误'})
    return render(request,'login.html')

def index(request):
    dic = {}
    try:
        #导航菜单
        pid = request.GET['pid']
        # dic['proj_list'] = models.Project.objects.all()
        dic['mode_list'] = models.Modular.objects.filter(project_id=pid)
        dic['point_list'] = models.Point.objects.filter(modular__project_id=pid)
        return render(request,'include/select_project.html',dic)
    except:
        #登入成功
        try:
            username = request.GET['username']
            obj = models.UserSave.objects.get(name=username)
            temp_list = obj.test_case
            temp_list = eval(temp_list)
        except:
            temp_list = None
        dic['test_list'] = json.dumps(temp_list)       #发送数组
        dic['proj_list'] = models.Project.objects.all()
        dic['proj_info'] = ["看到此页，是因为您尚未选择项目，或者您需要添加新的项目",]
        return render(request,'index.html',dic)

def addproject(request):
    dic = {}
    if request.method == "POST":
        name = request.POST['name']
        svn = request.POST['svn']
        action = request.POST['action']
        if name=="" or svn=="":
            dic['status'] = '不能为空'
        else:
            if action=='add':   #添加项目
                try:
                    models.Project.objects.get(name=name)
                except Exception as e:
                    print(e,'创建新项目')
                    models.Project.objects.create(name=name,svn=svn)
                    pid = models.Project.objects.get(name=name).id
                    dic['new_id'] = pid #仅仅是在添加项目时，更新菜单用到
                    dic['new_name'] = name #仅仅是在添加项目时，更新菜单用到
                else:
                    dic['status'] = '项目名已存在'
            elif action=='modify':      #修改操作，先判断项目id是否正确
                try:
                    project = models.Project.objects.get(id=request.POST['id'])
                except:
                    pass
                else:
                    project.name=name
                    project.svn=svn
                    project.save()
            else:       #禁用操作
                pass
    else:
        #点击菜单添加项目
        pass
    dic['proj_list'] = models.Project.objects.all()
    return render(request,'include/addproject.html',dic)

def addpoint(request):
    dic = {}
    if request.method == "POST":
        action = request.POST['action']
        name = request.POST['name']
        svn = request.POST['svn']
        main = request.POST['main']
        Type = request.POST['Type']
        pid = request.POST['pid']
        mid = request.POST['mid']
        print(request.POST)
        print(svn)
        if action=='add':        #添加模块或者功能点
            if Type == "modular":      #添加模块
                if name=="" or svn =="" or main=="":
                    dic['status'] = '不能为空'
                else:
                    try:
                        models.Modular.objects.filter(project_id=pid).get(name=name)
                    except:
                        project = models.Project.objects.get(id=pid)
                        add_dict = {'name':name,'svn':svn,'main':main,'project':project}
                        models.Modular.objects.create(**add_dict)
                    else:
                        dic['status'] = '模块名已存在'
                dic['mode_list'] = models.Modular.objects.filter(project_id=pid)
            elif Type == "point":     #添加功能点
                if name=="" or svn=="" or main=="":
                    dic['status'] = '不能为空'
                else:
                    try:
                        models.Point.objects.filter(modular_id=mid).get(name=name)
                    except:
                        modular = models.Modular.objects.get(id=mid)
                        add_dict = {'name':name,'svn':svn,'main':main,'modular':modular}
                        models.Point.objects.create(**add_dict)
                    else:
                        dic['status'] = '功能点已存在'
                dic['point_list'] =models.Point.objects.filter(modular_id=mid)
        elif action=='modify':  #修改模块或者功能点
            if Type== "modular":      #修改模块
                try:
                    mode = models.Modular.objects.get(id=request.POST['id'])
                except:
                    pass
                else:
                    mode.name=name
                    mode.svn=svn
                    mode.main=main
                    mode.save()
                # proj_project = models.Modular.objects.get(id=id[1:]).project
                dic['mode_list'] = models.Modular.objects.filter(project_id=pid)
            elif Type == "point":     #修改功能点
                try:
                    point = models.Point.objects.get(id=request.POST['id'])
                except:
                    pass
                else:
                    point.name=name
                    point.svn=svn
                    point.main=main
                    point.save()
                # mode_project = models.Point.objects.get(id=id[1:]).modular
                dic['point_list'] =models.Point.objects.filter(modular_id=mid)
        else:       #禁用模块或者功能点
            pass
        dic['Type'] = Type
        dic['pid'] = pid
        dic['mid'] = mid
    else:
        #请求跳转到模块/功能点添加页
        Type = request.GET['Type']
        if Type=="modular":
            pid = request.GET['pid']
            dic['mode_list'] = models.Modular.objects.filter(project_id=pid)
            dic['Type'] = Type
            dic['pid'] = pid
        elif Type == "point":
            mid = request.GET['mid']
            dic['point_list'] =models.Point.objects.filter(modular__id=mid)        #因为modular_id是唯一的
            dic['Type'] = Type
            dic['mid'] = mid
    return render(request,'include/addpoint.html',dic)

def machine(request):
    dic = {}
    if request.method == "POST":
        #点击弹窗的确定
        action = request.POST['action']
        print(action)
        if action == 'selected_machine_list':
            name = request.POST['name']
            machine_list = request.POST['machine_list']
            machine_list = eval(machine_list)
            temp_list = []
            for id in machine_list:
                temp_list.append(id[1:])
            try:
                models.UserSave.objects.get(name=name)      #如果存在则更新
                # models.UserSave.objects.get(name=name).update(machine_case=str(temp_list))
                obj = models.UserSave.objects.get(name=name)
                obj.machine_case = str(temp_list)
                obj.save()
            except:
                models.UserSave.objects.create(name=name,machine_case=str(temp_list))
            dic['save_machine_list'] = models.Machine.objects.filter(id__in=temp_list)
            dic['save_machine_arr'] = 'None'  #懒得写了，传None字符吧
            return render(request,'include/select_machine.html',dic)
    else:
        try:
            # 弹出执行机弹窗
            action = request.GET['action']
        except:
            #跳转到执行机页
            try:
                username = request.GET['username']
                obj = models.UserSave.objects.get(name=username)
                temp_list = obj.machine_case
                temp_list = eval(temp_list)
            except:
                temp_list = []
            dic['save_machine_list'] = models.Machine.objects.filter(id__in=temp_list)    #发送数据库
            temp_arr = []
            for arr in temp_list:
                temp_arr.append('c'+arr)
            dic['save_machine_arr'] = json.dumps(temp_arr)       #发送数组
            return render(request,'include/select_machine.html',dic)
        else:
            #弹出执行机弹窗
            dic['machine_list'] = models.Machine.objects.all()
            return render(request, 'include/popup.html', dic)

def monitor(request):
    '''获取test数据并写入文件'''
    data = request.POST['data']
    data = eval(data)

    result = go(data)
    #启动线程
    sendfilethread.go(result)

    return render(request,'include/monitor.html')

def addmachine(request):
    dic = {}
    if request.method == "POST":
        name = request.POST['name']
        ip = request.POST['ip']
        password = request.POST['password']
        action = request.POST['action']
        if name=="" or ip=="":
            dic['status'] = '不能为空'
        else:
            if action=='add':       #添加机器
                try:
                    models.Machine.objects.get(name=name)
                except Exception as e:
                    print(e,'添加机器')
                    models.Machine.objects.create(name=name,ip=ip,password=password)
                else:
                    dic['status'] = '机器名已存在'
            elif action=='modify':      #修改操作,先判断机器id是否正确
                try:
                    machine = models.Machine.objects.get(id=request.POST['cid'][1:])
                except:
                    pass
                else:
                    machine.name=name
                    machine.ip=ip
                    machine.password=password
                    machine.save()
            else:       #禁用操作
                pass
    else:
        #点击设置，添加机器
        pass
    dic['machine_list'] = models.Machine.objects.all()
    return render(request,'include/addmachine.html',dic)

#####################################
def go(testdict):
    #分析测试数据,筛选出有效数据，并写入数据库
    #testdict:{'c1':['m1','p3'],}
    test_list = []  #临时保存
    stamp = int(round(time.time()*1000))    #时间戳,毫秒级
    models.TestConfig.objects.filter(id=1).update(current_stamp=stamp)  #保存当前时间戳
    models.TestInfo.objects.create(time_stamp=stamp,test_list=testdict,status=0)   #新建测试
    for key,item in testdict.items():
        #判断机器是否存在
        try:
            machine = models.Machine.objects.get(id=key[1:])
        except:     #不存在时
            print('>>>>>>>执行机:',key,'>>>>>>>>>不存在！')
            continue
        #判断IP是否填写
        if not machine.ip:  #如果没有填写ip地址,则读取下一条
            print('>>>>>>>执行机:',key,'>>>>>>>>>IP地址为空！')
            continue
        #如果IP写好了
        for value in item:
            # 先判断数据是否正确
            if value[0] == 'm':     #是模块
                mode = models.Modular.objects.get(id=value[1:])
                proj_svn = mode.project.svn
            elif value[0] == 'p':     #是功能点
                mode = models.Point.objects.get(id=value[1:])
                proj_svn = mode.modular.project.svn
            else:
                print('>>>>>>>执行机:{}({}) --测试项{} >>>>>>>>>测试数据异常！'.format(machine.name,machine.ip,value))
                continue
            # 再判断svn文件和主文件是否写好
            if not (mode.svn and mode.main):
                print('>>>>>>>执行机:{}({}) --测试项{} >>>>>>>>>未配置svn！'.format(machine.name,machine.ip,mode.name))
                continue

            #如果都写了（可能写的不对），则写到sjk中，以便以后发送
            models.TestInfo_Detail.objects.create(time_stamp=stamp,test_case=value,machine=machine,status=0)   #新建测试
        else:
            test_list.append(key)       #保存该机器
    else:
        try:
            testinfo = models.TestInfo.objects.get(time_stamp=stamp)    #并且获取出来
        except:
            pass
        else:
            testinfo.machine_list=test_list #保存本次测试的执行机，数组
            testinfo.save()
            '''
            with open(file_name,'w') as f:
                #第一行：ip name password dest mainfile
                line_data = machine.ip+" "+machine.name+" "+machine.password+" "+"d:/TEST_CASE"+" "+mode.main
                f.write(line_data)
                #第二行开始为要发送的svn文件：src_file
                for svni in mode.svn.split("\n"):
                    f.write('\n')     #先换行
                    line_data = proj_svn+svni
                    f.write(line_data)
            test_list.append(file_name) #添加list文件
            '''
    #写入了数据库后，发送文件
    return stamp

##++++++++++++++++++++++++++++++++++++++++++++++

def select_machine(request):
    dic = {}
    dic['action'] = 'select_machine'
    dic['proj_list'] = models.Project.objects.all()
    dic['machine_list'] = models.Machine.objects.all()

    return render(request,'index.html',dic)